type: edu
custom_name: stage6
files:
- name: src/processor/Main.java
  visible: true
  text: |
    package processor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    import static java.lang.Math.abs;


    class TestClue {

        String feedback;
        ArrayList<Double> answers;

        TestClue(String feedback, Double[] answers) {
            this.feedback = feedback;
            this.answers = new ArrayList<>(Arrays.asList(answers));
        }
    }

    public class NumericMatrixProcessorTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            7d, 13d, 132d,
                            17d, 23d, 45d,
                            65d, 57d, 78d
                        }))
                    .setInput(
                        "1\n"+
                            "3 3\n" +
                            "3 4 55\n" +
                            "4 1 1\n" +
                            "9 0 0\n" +
                            "3 3\n" +
                            "4 9 77\n" +
                            "13 22 44\n" +
                            "56 57 78\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            43.13d, 911.62d, 1311.8d, 136.53d,
                            -4.2d, 141.1d, -1.09d, 1421.6d,
                            230.33d, 114.2d, 100.7d, 990.4d,
                            956.72d, 168.94d, 112.16d, 27.0d
                        }))
                    .setInput(
                        "1\n"+
                            "4 4\n" +
                            "-0.3 677.4 435.2 123.33\n" +
                            "1.3 141.4 0.11 1411.4\n" +
                            "231.33 113.4 99.9 999.9\n" +
                            "1002.22 123.44 55.66 13.3\n" +
                            "4 4\n" +
                            "43.43 234.22 876.6 13.2\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            187d, 3978d, 7548d,
                            7752d, 5831d, 3774d,
                            16949d, 7752d, 7752d
                        }))
                    .setInput(
                        "2\n" +
                            "3 3\n" +
                            "11 234 444\n" +
                            "456 343 222\n" +
                            "997 456 456\n" +
                            "17\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            1123653d, 5933505d, 110927295d, 2365632d,
                            1505049d, 8619594d, 25665531d, 3833274d,
                            1366632d, 2598732d ,37999962d, 58303305d,
                            11068143d, 9781653d ,13666653d ,13443321d
                        }))
                    .setInput(
                        "2\n" +
                            "4 4\n" +
                            "10123 53455 999345 21312\n" +
                            "13559 77654 231221 34534\n" +
                            "12312 23412 342342 525255\n" +
                            "99713 88123 123123 121111\n" +
                            "111\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            45d, 113d, 11d, 266d,
                            84d, 139d, 29d, 229d,
                            45d, 49d, 35d, 100d,
                            15d, 86d, 0d, 281d ,
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "1 2 2 7\n" +
                            "3 3 4 5\n" +
                            "5 0 0 1\n" +
                            "0 1 0 8\n" +
                            "4 4\n" +
                            "9 8 7 13\n" +
                            "15 14 0 1\n" +
                            "3 7 2 3\n" +
                            "0 9 0 35\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            243d, 295d, 78d, 60d,
                            724d, 798d, 2063d, 175d
                        }))
                    .setInput(
                        "3\n" +
                            "2 3\n" +
                            "1 0 17\n" +
                            "15 19 7\n" +
                            "3 4\n" +
                            "5 6 78 9\n" +
                            "29 31 47 1\n" +
                            "14 17 0 3\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if you can do more than one operation in a loop",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d,
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 2 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 5 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 2 4\n" +
                            "4 6 6\n" +
                            "7 7 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 5 4\n" +
                            "4 6 6\n" +
                            "7 7 1.0\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "3\n" +
                            "4 4\n" +
                            "6 5 4 2\n" +
                            "8 7 6 6\n" +
                            "1 0 0 5.0\n" +
                            "9 2 8 8\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "4\n" +
                            "4 4\n" +
                            "8 8 2 9\n" +
                            "5 0 0 1\n" +
                            "6 6 7 8.0\n" +
                            "2 4 5 6\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            31d
                        }))
                    .setInput(
                        "5\n" +
                            "3 3\n" +
                            "1 2 3\n" +
                            "4 5 7\n" +
                            "10 22 23\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            45.2197d
                        }))
                    .setInput(
                        "5\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if inversion algorithm is correct",
                        new Double[]{
                            1.14717, 2.03717, 2.9711,
                            2.19055, 4.52055, 7.20788,
                            3.67009, 0.590087, 1.33819
                        }))
                    .setInput(
                        "6\n" +
                            "3 3\n" +
                            "0.396796 -0.214938 0.276735\n" +
                            "5.19655 -2.06983 -0.388886\n" +
                            "-3.3797 1.50219 0.159794\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if inversion algorithm is correct",
                        new Double[]{
                            0.396796, -0.214938, 0.276735, -0.5092,
                            5.19655, -2.06983, -0.388886, -3.14252,
                            -3.3797, 1.50219, 0.159794, 2.04842,
                            -0.593332, 0.230065, 0.00259267, 0.50345
                        }))
                    .setInput(
                        "6\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0")
            );
        }


        @Override
        public CheckResult check(String reply, TestClue clue) {

            try {

                String[] strNumbers = reply.lines()
                    .filter(line -> {
                        line = line.strip();
                        if (line.length() == 0) {
                            return false;
                        }
                        for (char c : line.toCharArray()) {
                            if (!(c == ' ' ||
                                c >= '0' && c <= '9' ||
                                c == '.' ||
                                c == '-' || c == '+' ||
                                c == 'e' || c == 'E')) {
                                return false;
                            }
                        }
                        return true;
                    }).reduce("", (a, b) -> a + " " + b)
                    .strip().split("\\s+");

                double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();

                double[] expected =
                    clue.answers.stream()
                        .mapToDouble(e -> e)
                        .toArray();
                if (actual.length != expected.length) {
                    return new CheckResult(false, clue.feedback);
                }

                for (int i = 0; i < actual.length; i++) {
                    if (abs(actual[i] - expected[i]) > 0.01) {
                        return new CheckResult(false, clue.feedback);
                    }
                }
            }
            catch (Exception ex) {
                return new CheckResult(false, "Can't check the answer");
            }

            return CheckResult.correct();

        }

    }
  learner_created: false
- name: src/processor/Matrix.java
  visible: true
  text: |
    package processor;

    import java.util.Scanner;

    public class Matrix {

        Scanner scanner = new Scanner(System.in);

        int numRows;
        int numCols;
        double[][] matrix;

        public Matrix(int numRows, int numCols) {
            this.numRows = numRows;
            this.numCols = numCols;
            this.matrix = new double[numRows][numCols];
        }


        public void readMatrix() {
            this.numRows = getNumRows();
            this.numCols = getNumCols();

            for (int rowIndex = 0; rowIndex < numRows; rowIndex++) {
                    for (int colIndex = 0; colIndex < numCols; colIndex++) {
                        double read = scanner.nextDouble();
                        setValue(rowIndex, colIndex, read);
                    }
            }
        }

        public void printMatrix() {

            this.numRows = getNumRows();
            this.numCols = getNumCols();

            for (int rowIndex = 0; rowIndex < numRows; rowIndex++) {
                for (int colIndex = 0; colIndex < numCols; colIndex++) {
                    System.out.print(getValue(rowIndex, colIndex) + " ");
                }
                System.out.println();
            }
        }


        public int getNumRows() {
            return this.numRows;
        }

        public int getNumCols() {
            return this.numCols;
        }

        public double getValue(int rowIndex, int colIndex) {
            return this.matrix[rowIndex][colIndex];
        }

        public void setValue(int rowIndex, int colIndex, double value) {
            this.matrix[rowIndex][colIndex] = value;
        }

    }
  learner_created: true
- name: src/processor/Operations.java
  visible: true
  text: |
    package processor;

    public class Operations {

        public boolean checkSizesSum(Matrix matrixA, Matrix matrixB) {
            int numRowsA = matrixA.getNumRows();
            int numColsA = matrixA.getNumCols();

            int numRowsB = matrixB.getNumRows();
            int numColsB = matrixB.getNumCols();

            if (numRowsA == numRowsB && numColsA == numColsB) {
                return true;
            } else {
                return false;
            }
        }

        public boolean checkSizesMult(Matrix matrixA, Matrix matrixB) {
            int numColsA = matrixA.getNumCols();
            int numRowsB = matrixB.getNumRows();


            if (numColsA == numRowsB) {
                return true;
            } else {
                return false;
            }
        }

        public boolean checkSizesDet(Matrix matrix) {
            int numCols = matrix.getNumCols();
            int numRows = matrix.getNumRows();


            if (numCols == numRows) {
                return true;
            } else {
                return false;
            }
        }

        public Matrix sumMatrix(Matrix matrixA, Matrix matrixB) {

            int numRows = matrixA.getNumRows();
            int numCols = matrixA.getNumCols();

            Matrix matrixSum = new Matrix(numRows, numCols);

            for (int rowIndex = 0; rowIndex < numRows; rowIndex++) {
                for (int colIndex = 0; colIndex < numCols; colIndex++) {
                    matrixSum.setValue(rowIndex, colIndex, matrixA.getValue(rowIndex, colIndex) + matrixB.getValue(rowIndex, colIndex));
                }
            }
            return matrixSum;
        }

        public Matrix multiplyConst(Matrix matrix, double constant) {

            int numRows = matrix.getNumRows();
            int numCols = matrix.getNumCols();

            Matrix matrixMultConst = new Matrix(numRows, numCols);

            for (int rowIndex = 0; rowIndex < numRows; rowIndex++) {
                for (int colIndex = 0; colIndex < numCols; colIndex++) {
                    matrixMultConst.setValue(rowIndex, colIndex, matrix.getValue(rowIndex, colIndex) * constant);
                }
            }
            return matrixMultConst;
        }

        public Matrix multiplyMatrix(Matrix matrixA, Matrix matrixB) {

            int numRows = matrixA.getNumRows();
            int numCols = matrixB.getNumCols();

            Matrix matrixMultiply = new Matrix(numRows, numCols);

            for (int rowIndex = 0; rowIndex < numRows; rowIndex++) {
                for (int colIndex = 0; colIndex < numCols; colIndex++) {
                    matrixMultiply.setValue(rowIndex, colIndex, dotMultiplication(matrixA, matrixB, rowIndex, colIndex));
                }
            }
            return matrixMultiply;
        }

        public double dotMultiplication(Matrix matrixA, Matrix matrixB, int rowIndex, int colIndex) {
            double result = 0;
            double[] rowA = new double[matrixA.getNumCols()];
            double[] colB = new double[matrixB.getNumRows()];

            for (int indexArray = 0; indexArray < rowA.length; indexArray++) {
                rowA[indexArray] = matrixA.getValue(rowIndex, indexArray);
                colB[indexArray] = matrixB.getValue(indexArray, colIndex);
                result += rowA[indexArray] * colB[indexArray];
            }
            return result;
        }

        public Matrix transposeMainDiagonal(Matrix matrix) {
            int numRows = matrix.getNumCols();
            int numCols = matrix.getNumRows();

            Matrix matrixTransposed = new Matrix(numRows, numCols);

            for (int rowIndex = 0; rowIndex < numRows; rowIndex++) {
                for (int colIndex = 0; colIndex < numCols; colIndex++) {
                    matrixTransposed.setValue(rowIndex, colIndex, matrix.getValue(colIndex, rowIndex));
                }
            }
            return matrixTransposed;
        }

        public Matrix transposeSideDiagonal(Matrix matrix) {
            int numRows = matrix.getNumCols();
            int numCols = matrix.getNumRows();

            Matrix matrixTransposed = new Matrix(numRows, numCols);

            for (int rowIndex = 0; rowIndex < numRows; rowIndex++) {
                for (int colIndex = 0; colIndex < numCols; colIndex++) {
                    matrixTransposed.setValue(rowIndex, colIndex, matrix.getValue(numRows - colIndex - 1, numCols - rowIndex - 1));
                }
            }
            return matrixTransposed;
        }

        public Matrix transposeVerticalLine(Matrix matrix) {
            int numRows = matrix.getNumRows();
            int numCols = matrix.getNumCols();

            Matrix matrixTransposed = new Matrix(numRows, numCols);

            for (int rowIndex = 0; rowIndex < numRows; rowIndex++) {
                for (int colIndex = 0; colIndex < numCols; colIndex++) {
                    matrixTransposed.setValue(rowIndex, colIndex, matrix.getValue(rowIndex, numCols - colIndex - 1));
                }
            }
            return matrixTransposed;
        }

        public Matrix transposeHorizontalLine(Matrix matrix) {
            int numRows = matrix.getNumRows();
            int numCols = matrix.getNumCols();

            Matrix matrixTransposed = new Matrix(numRows, numCols);

            for (int rowIndex = 0; rowIndex < numRows; rowIndex++) {
                for (int colIndex = 0; colIndex < numCols; colIndex++) {
                    matrixTransposed.setValue(rowIndex, colIndex, matrix.getValue(numRows - rowIndex - 1, colIndex));
                }
            }
            return matrixTransposed;
        }

        public double calculateDet(Matrix matrix) {
            double det = 0;
            int sign = 1;

            if (matrix.getNumRows() == 1) {
                return matrix.getValue(0, 0);
            }

            Matrix tempMatrix = new Matrix(matrix.getNumRows() - 1, matrix.getNumCols() - 1);

            for (int IndexFirstRow = 0; IndexFirstRow < matrix.getNumRows(); IndexFirstRow++) {
                getCofactor(matrix, tempMatrix, 0, IndexFirstRow);
                det += sign * matrix.getValue(0, IndexFirstRow) * calculateDet(tempMatrix);
                sign = -sign;
            }
            return det;
        }

        public void getCofactor(Matrix matrix, Matrix tempMatrix, int rowIndex, int colIndex) {

            int tempMatrixRow = 0;
            int tempMatrixCol = 0;


            for (int tempRowIndex = 0; tempRowIndex < matrix.getNumRows(); tempRowIndex++) {
                for (int tempColIndex = 0; tempColIndex < matrix.getNumCols(); tempColIndex++) {
                    if (tempRowIndex != rowIndex && tempColIndex != colIndex) {
                        tempMatrix.setValue(tempMatrixRow, tempMatrixCol, matrix.getValue(tempRowIndex, tempColIndex));
                        tempMatrixCol++;
                        if (tempMatrixCol == matrix.getNumCols() - 1) {
                            tempMatrixCol = 0;
                            tempMatrixRow++;
                        }
                    }
                }
            }
        }
    }
  learner_created: true
- name: src/processor/Menu.java
  visible: true
  text: |
    package processor;

    import java.util.Scanner;

    public class Menu {

        Scanner scanner = new Scanner(System.in);

        public int printIniMenu() {
            System.out.println("1. Add matrices");
            System.out.println("2. Multiply matrix by a constant");
            System.out.println("3. Multiply matrices");
            System.out.println("4. Transpose matrix");
            System.out.println("5. Calculate a determinant");
            System.out.println("0. Exit");
            System.out.println("Your choice: ");
            int chosenOption = -1;
            chosenOption = scanner.nextInt();
            while (chosenOption < 0 || chosenOption > 5) {
                System.out.println("Option not valid, please choose between available options");
                chosenOption = scanner.nextInt();
            }
            return chosenOption;
        }

        public Matrix requestMatrix(String matrixNum) {
            System.out.printf("\nEnter size of %smatrix:\n", matrixNum);
            int numRows = scanner.nextInt();
            int numCols = scanner.nextInt();
            Matrix matrix = new Matrix(numRows, numCols);
            System.out.printf("\nEnter %s matrix:\n", matrixNum);
            matrix.readMatrix();
            return matrix;
        }

        public double requestConstant() {
            System.out.println("Enter constant:");
            return scanner.nextDouble();
        }

        public void exitOption() {
            System.exit(0);
        }

        public void additionOption() {
            Operations operations = new Operations();
            Matrix matrixA = requestMatrix("first ");
            Matrix matrixB = requestMatrix("second ");
            if (operations.checkSizesSum(matrixA, matrixB)) {
                System.out.println();
                System.out.println("The result is:");
                Matrix matrixC = operations.sumMatrix(matrixA, matrixB);
                matrixC.printMatrix();
                System.out.println();
            } else {
                System.out.println("The operation cannot be performed");
            }
        }

        public void multConstOption() {
            Operations operations = new Operations();
            Matrix matrix = requestMatrix("");
            Double constant = requestConstant();
            System.out.println();
            System.out.println("The result is:");
            Matrix matrixResult = operations.multiplyConst(matrix, constant);
            matrixResult.printMatrix();
            System.out.println();
        }

        public void multiplicationOption() {
            Operations operations = new Operations();
            Matrix matrixA = requestMatrix("first ");
            Matrix matrixB = requestMatrix("second ");
            System.out.println();
            if (operations.checkSizesMult(matrixA, matrixB)) {
                System.out.println("The result is:");
                Matrix matrixC = operations.multiplyMatrix(matrixA, matrixB);
                matrixC.printMatrix();
                System.out.println();
            } else {
                System.out.println("The operation cannot be performed");
            }
        }

        public void transposeOption() {
            int transposeType = transposeTypeRequest();
            Matrix matrix = requestMatrix("");
            System.out.println();
            System.out.println("The result is:");
            Matrix matrixResult = transposeTypeSelection(matrix, transposeType);
            matrixResult.printMatrix();
            System.out.println();
        }

        public int transposeTypeRequest() {
            System.out.println();
            System.out.println("1. Main diagonal");
            System.out.println("2. Side diagonal");
            System.out.println("3. Vertical line");
            System.out.println("4. Horizontal line");
            System.out.println("Your choice");
            int chosenOption = -1;
            chosenOption = scanner.nextInt();
            while (chosenOption < 0 || chosenOption > 4) {
                System.out.println("Option not valid, please choose between available options");
                chosenOption = scanner.nextInt();
            }
            return chosenOption;
        }

        public Matrix transposeTypeSelection(Matrix matrix, int option) {
            Operations operations = new Operations();
            switch (option) {
                case 0:
                    exitOption();
                case 1:
                    return operations.transposeMainDiagonal(matrix);
                case 2:
                    return operations.transposeSideDiagonal(matrix);
                case 3:
                    return operations.transposeVerticalLine(matrix);
                case 4:
                    return operations.transposeHorizontalLine(matrix);
                default:
                    System.out.println("Input Error");
                    return matrix;
            }
        }

        public void calculateDetOption() {
            Operations operations = new Operations();
            Matrix matrix = requestMatrix("");
            if (operations.checkSizesDet(matrix)) {
                System.out.println();
                System.out.println("The result is:");
                double det = operations.calculateDet(matrix);
                System.out.println(det);
                System.out.println();
            } else {
                System.out.println("Error: matrix has to be square, try again");
            }
        }


        public void optionSelection(int option) {
            switch (option) {
                case 0:
                    exitOption();
                case 1:
                    additionOption();
                    break;
                case 2:
                    multConstOption();
                    break;
                case 3:
                    multiplicationOption();
                    break;
                case 4:
                    transposeOption();
                    break;
                case 5:
                    calculateDetOption();
                    break;
                default:
                    System.out.println("Input Error");
                    break;

            }
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/60/stages/328/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/60/stages/328/implement">JetBrains
    Academy</a>
  time: Wed, 17 Mar 2021 21:57:10 UTC
record: 6
